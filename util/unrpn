#!/usr/bin/perl
my $membersuffix = $ENV{membersuffix} || '';
my $dryrun = $ENV{dryrun};
my $outdir = $ENV{outdir} || `echo ~`;

sub say {
    my $s = join(' ',@_);
    chomp $s;
    print STDERR $s,"\n";
}
if ($dryrun) {
} else {
  $^I = '~';
}
say "membersuffix=$membersuffix dryrun=$dryrun -i=$^I";
my $cfh;
my $cfile="$outdir/tmp/collisions.txt";
my $cfilesfile="$outdir/tmp/collision.files.txt";
my $renamesfile="$outdir/tmp/renames.txt";
chomp $cfile;
my $cdir=`dirname $cfile`;
chomp $cdir;
`mkdir -p $cdir`;
my $origline;
my $orig;
my $field;

my %collisionfiles;

sub cprint {
    ++$collisionfiles{$ARGV};
    open($cfh,">>",$cfile) if !defined($cfh);
    print $cfh @_;
    say(@_);
}

my %rewrote;

sub collision {
    my $old=$rewrote{$_};
    if ($old && $old ne $orig) {
        cprint "COLLISION $ARGV:$. #$field: {$old,$orig} => $_\n $origline"
    }
    $rewrote{$_}=$orig;
    $orig=$_;
}

sub stripcamel {
  my($pre,$post)=@_;
  s|^(?:$pre)([A-Z])|lcfirst($1)|e;
}

sub stripany {
  my($pre)=@_;
  s|^$pre||;
}

my %renames;
sub renamed {
    my ($pre,$post)=@_;
    $renames{$pre} = $post;
}

#$_ is a variable name
sub rename {
    local($_)=@_;
    $orig=$_;
    $_ .= $membersuffix if stripany('m_');
    stripcamel('b|u|str|vec|map|the|sz');
    stripcamel('the');
    s|^iter(?=[A-Z])|i|;
    renamed($orig,$_) if ($orig ne $_);
    &collision;
    $_
}

sub rewroteline {
    print STDERR "rewrote:\n< $origline> $_";
}

while(<>) {
    $origline=$_;
    $field=0;
    s|\b([a-zA-Z_][a-zA-Z_0-9]+)\b|&rename($1)|ge;
    if ($origline ne $_) {
        rewroteline($origline,$_);
    }
    print unless $dryrun;
}


say '---';
say 'RENAMES:';
say "$_\t$renames{$_}\n" for (keys %renames);

open RENAMES,">", $renamesfile;
print RENAMES "$_\t$renames{$_}\n" for (keys %renames);

say '---';
say 'COLLISIONS:';
say "$collisionfiles{$_}\t$_\n" for (keys %collisionfiles);
open CFILES,">", $cfilesfile;
print CFILES "$_\n" for (keys %collisionfiles);
