#!/usr/bin/python

import sys, os, re, subprocess, argparse
from libgitcredit import *

def options():
    parser = argparse.ArgumentParser(description='given a list of input paths inside the git repo your current dir is in, give credit according to `git blame`, optionally creating a fresh git repo without meaningful history but with a commit per author')
    addarg(parser, '-f', str, 'filelist',
           'file containing lines X to `git blame X` (from the current dir); - means STDIN - e.g. `find . > /tmp/filelist`')
    addarg(parser, '-a', str, 'authormap',
           'author mapping file - lines of e.g. gitauthorname = Normalized Author <user@example.com> - order is commit order for -o')
    addarg(parser, '-b', str, 'blamearg',
           '-argument passed to git blame e.g. for copy detection (which can be extremely slow) C CC or CCC')
    addarg(parser, '-o', str, 'outdir',
           'outdir (if set) used to store author revision subdirs outdir/0/ outdir/1/ ... with outdir/authors file')
    addarg(parser, '-v', int,
           'verbose', '> 0 means more logging')
    addpositional(parser, 'filename', '(args X for `git blame X`; added to --filelist file)')
    parser.set_defaults(authormap='~/.git.authors', outrepo='', blamearg='', filelist='', filename=[], verbose=0)
    return parser

global verbose
verbose = 0

def logverbose(v, *L, **M):
    if verbose >= v:
        log(*L, **M)

class Contribution(object):
    """ count number of lines over longlen nonspace chars long
    """
    def __init__(self, longlen=4):
        self.longlen = longlen
        self.lines = 0
        self.nonspacelines = 0
        self.longlines = 0
        self.chars = 0
        self.nonspacechars = 0
    def count(self, line):
        self.lines += 1
        self.chars += len(line)
        line = chomp(line)
        chars = len(line) - line.count(' ') - line.count('\t') - line.count('\r') - line.count('\n')
        if chars > 0:
            self.nonspacechars += chars
            self.nonspacelines += 1
            if chars >= self.longlen:
                self.longlines += 1
    def add(self, o):
        self.lines += o.lines
        self.nonspacelines += o.nonspacelines
        self.longlines += o.longlines
        self.chars += o.chars
        self.nonspacechars += o.nonspacechars

    def __str__(self):
        return '%s nonspace characters in %s lines with >= %s' % (self.nonspacechars, self.longlines, self.longlen)

import collections

class Contributions(collections.defaultdict):
    def __init__(self, *a, **kw):
        collections.defaultdict.__init__(self, Contribution, *a, **kw)
    def __str__(self):
        return '\n'.join(self.summary())
    def summary(self, aorder=None, total=True):
        if aorder is None:
            aorder = sorted(keys(self))
        s = []
        totalc = Contribution()
        for a in aorder:
            if a in self:
                c = self[a]
                totalc.add(c)
                s.append('%s\t%s' % (a, c))
        if total:
            s.append('%s\t%s' % ('TOTAL', totalc))

        return s

def selectlines(lineseq, seq):
    return

def gitblame(authorships, filename=None, blameargs=[], contributions=None, repodir='.'):
    """
    record contributions, a Contributions() map

    if filename not set git blame runs on all files

    return
    """
    args = ['git', 'blame', '--line-porcelain']
    if blameargs:
        log(blameargs)
        args.extend(blameargs)
    if filename:
        args.append(filename)
    log('running: %s' % args)
    proc = subprocess.Popen(args, cwd=repodir, stdout=subprocess.PIPE, bufsize=0, shell=False)
    authorpre = 'author '
    filenamepre = 'filename '
    contentpre = '\t'
    lineseq = [] # (line, autorship-sequence)
    seqauthor = {}
    for p in iter(proc.stdout.readline, b''):
        if p.startswith(authorpre):
            author = chomp(p[len(authorpre):])
        elif p.startswith(filenamepre):
            filename = chomp(p[len(filenamepre):])
        elif p.startswith(contentpre):
            content = p[len(contentpre):]
            assert author is not None
            assert filename is not None
            logverbose(2, '%s\t%s\t%s' % (filename, author, chomp(content)))
            author, seq = authorships.authorseq(author)
            seqauthor[seq] = author
            logverbose(1, '%s %s %s' % (filename, seq, author))
            if contributions is not None:
               contributions[author].count(content)
            lineseq.append((content, seq))
            if authorships.outdir:
                for seq, author in seqauthor.items():
                    with authorships.writeseq(author, filename) as out:
                        for line, s in lineseq:
                            out.write(line if s <= seq else '\n')
            author = None
            filename = None
    (output, err) = proc.communicate()
    if proc.returncode != 0:
        log('ERROR: %s' % args)

def commitmsg(author):
    return '%s initial commit' % author

def authormap(amapfile):
    amap = {}
    authors = set()
    aorder = []
    if amapfile:
        if not os.path.isfile(amapfile):
            log("--authormap file %s not found" % amapfile)
        else:
            for line in chomped_lines(open_in(amapfile)):
                mapping = line.split(' = ')
                if len(mapping) == 2:
                    name, repl = mapping
                    if repl not in authors:
                        authors.add(repl)
                        aorder.append(repl)
                    if name not in amap:
                        amap[name] = repl
                    else:
                        log('duplicate authorsmap author: %s' % name)
                else:
                    log("bad author-map line: '%s' - should be 'in = out'" % line)
    return amap, aorder

class Authorships(object):
    def __init__(self, amapfile, outdir=None, frozen=False):
        self.outdir = outdir
        if self.outdir:
            self.authorsfilename = os.path.join(self.outdir, 'authors')
            self.authorsfile = open_out(self.authorsfilename, mkdir=True)
        self.amap, self.aorder = authormap(amapfile)
        self.aseq = {}
        for i, author in enumerate(self.aorder):
            self.setseq(i, author)
        self.frozen = frozen
        self.madedirs = set()
    def makedir(self, d):
        if d not in self.madedirs:
            mkdir_p(d)
            self.madedirs.add(d)
        return d
    def seq(self, author):
        return self.authorseq(author)[1]
    def setseq(self, seq, author):
        self.aseq[author] = seq
        if self.outdir:
            self.authorsfile.write('%d\t%s\n' % (seq, author))
    def authorseq(self, author):
        if author in self.amap:
            author = self.amap[author]
        elif self.frozen:
            raise SystemExit("%s not in author map" % author)
        if author not in self.aseq:
            self.setseq(len(self.aorder), author)
            self.aorder.append(author)
        return author, self.aseq[author]
    def seqdir(self, author, subdir):
        return self.makedir(os.path.join(self.outdir, str(self.seq(author)), subdir))
    def writeseq(self, author, subpath):
        subdir, basename = os.path.split(subpath)
        return open(os.path.join(self.seqdir(author, subdir), basename), 'wb')

def ensureprefix(str, pre):
    return str if str.startswith(pre) else pre + str

def gitcredit(opt):
    files = maybe_lines_in(opt.filelist)
    files.extend(opt.filename)
    authorships = Authorships(opt.authormap, opt.outdir)
    contributions = Contributions()
    blameargs = ['-w', '-M']
    if opt.blamearg:
        blameargs.append(ensureprefix(opt.blamearg, '-'))
    gitrepo = opt.outrepo
    for file in files:
        log('gitcredit %s' % file)
        gitblame(authorships, file, blameargs, contributions=contributions)
    print '\n'.join(contributions.summary(authorships.aorder))

if __name__ == '__main__':
    try:
        opt = options().parse_args()
        verbose = opt.verbose
        gitcredit(opt)
    except KeyboardInterrupt:
        log("^C user interrupt")
