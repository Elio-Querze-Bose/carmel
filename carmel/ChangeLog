Thu Aug 28 14:15:46 2003  Jonathan Graehl  <graehl@brahms.isi.edu>

	* src/config.h (CONFIG_H): define DOUBLE_PRECISION to use doubles
 	instead of floats (probably 25% more memory would be used in a
 	transducer, and 70% more in training)

Wed Aug 27 17:12:16 2003  Jonathan Graehl  <graehl@brahms.isi.edu>

	* src/train.cc: -o 1.1 scales EM changes, new code to deal with anomoly that EM can worsen perplexity if tied arcs make normalization unstable/nonconvergent (e.g. span.spell.wfst).  related changes in several files.

Tue May 20 17:14:36 2003  Jonathan Graehl  <graehl@enescu.isi.edu>

	* marcu hide-the-transducer changes (if #define MARCU in finite.cc)

2003-03-28  Jonathan Graehl  <graehl@isi.edu>

	* src/wfstio.cc: added option (-K) to force state names, otherwise
	assume if finalstate is an integer, that states are unnamed
	(non-sparse integer indices)

	* src/strhash.h: fixed STRINGPOOL, added named_states flag
	(stateName not thread-safe if unnamed states)

2003-03-27  Jonathan Graehl  <graehl@isi.edu>

	* src/finite.cc: ownalphabet in compose chain - copies (rather
	than transfers) alphabet ... performance ...  unify code for -l
	and -r (loops have start, end, direction +1 or -1; or, reverse
	list and use same loop (but switch order of arguments if you do))
	-q = quiet (added some default logging)

2002-12-17  Jonathan Graehl  <graehl@isi.edu>

	* src/wfstio.cc: ignore/strip CR char (so unix carmel can process
	DOS-text output); added graphvis 8.5x11 landscape formatting

2002-12-16  Jonathan Graehl  <graehl@isi.edu>

	* src/wfstio.cc: implemented -Y (GraphViz)

	* src/2hash.h: moved static pool allocator stuff into #ifdef
	CUSTOMNEW and tested with/without it defined

	* src/finite.cc: added -Y option for output of GraphViz .dot files

2002-12-13  Jonathan Graehl  <graehl@isi.edu>

	removed leftover node.h (old homegrown list) from CVS

	* src/slist.h: (and many other files) - when USE_SLIST defined in
	config.h, use a singly linked list (memory efficient) in all
	cases.  required some serious rework, but I was using a singly
	linked list until Yaser tore it out in favor of STL list.  my
	slist is largely STL compatible (not everything implemented) with
	the addition of two types of iterators - one that uses an extra
	level of indirection to allow insertion, and another that uses a
	plain pointer for more efficiently examining values

2002-12-10  Jonathan Graehl  <graehl@isi.edu>

	* src/wfstio.cc: allow zero-weight arcs on input - useful with -U prior counts

	* src/train.cc: changed trainBegin to take parameters for -f and
	-U.  new prior_counts attribute for each arc in training (Dirichlet prior)

	* src/finite.cc: added -U option: initial weights as prior counts for training

2002-11-22  Jonathan Graehl  <graehl@isi.edu>

	* src/graph.cc: changed mind.  split into two functions - one that
	builds all-source->one dest tree, other does single-source
	dijikstra and sets taken link pointers

	* src/kbest.cc: changed mind.  moved kbest reverse code into
	graph.cc function

	* src/finite.cc: added command line description of -w, -z

	* src/fst.h: added clear() and printArc()
	
	* src/config.h: added Config::debug() warn() and log() stream
	fetchers.  new DEBUG options

	* src/fst.cc: added prunePaths code.  tested.  changed reduce,
	removing yaser's set-tie-group-to-zero for deleted arcs.  should
	have no effect.

	* src/kbest.cc: because of change in graph.cc, reverse graph
	before bestPathsTree.

	* src/graph.cc: changed bestPathsTree to do single-source all-dest
	instead of single-dest.  

	* src/finite.cc: added -w,-z max-state/path-cost-ratio pruning
	options, restructured prune/minimize code (do not prune before
	training/assigning weights)

2002-11-21  Jonathan Graehl  <graehl@isi.edu>

	* src/weight.h: added pow, root, {set|Is}Infinity

	* src/fst.h: added WFST::log, warn, debug output streams

	* src/finite.cc: added -X option to set perplexity convergence ratio.  bumped version.

	* src/graph.cc: reworked topological sort to detect cycles.  put state and code in TopoSort class.

	* src/train.cc: changed perplexity measurement to per-symbol.  added ppx ratio convergence option


2002-11-07  Jonathan Graehl  <graehl@isi.edu>

	* src/train.cc: added perplexity measurement to training (-t)

	* Makefile: changes ARCH to linux/solaris/cygwin/freebsd, set CC.$ARCH to point to gcc version 3

	* src/weight.h: default output base is now e (and output is -30ln instead of -10log)

	* src/wfstio.cc: lines beginning with # (that aren't part of a quoted symbol) are ignored as comments

	* src/finite.cc: state names are no longer removed and replaced with numbers by default except in composition;
	this should help people who are only using carmel for -k best paths and don't understand why their state numbers change

	new options:
	-g no longer bounds number of arcs taken between min and min+#states, nor requires normalization.
	-G randomly chooses arcs according to joint normalization and lists them like -k
	-u blocks normalization entirely during e.g. training; can be used with -tuM 1 to give forward-backward counts for arcs
	-j performs joint rather than conditional normalization
	-B, -Z, -D options for output format of weights, -H,-J transducer output options:
	may make reading carmel output more palatable to programs

	* README (installation): 
	(usage): 

